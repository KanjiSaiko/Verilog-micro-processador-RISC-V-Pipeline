`timescale 1ns / 1ps

module tb_pipeline;

  reg clock;
  reg reset;

  // Instância do módulo principal
  RISCV_Pipeline uut (
    .clock(clock),
    .reset(reset)
  );

  // Clock: alterna a cada 5ns => período de 10ns
  always #5 clock = ~clock;

  reg [31:0] pc_anterior;

  // Bloco para imprimir informações a cada ciclo
  initial begin
      pc_anterior = 32'b0;
      forever begin
          @(posedge clock);

          $display("PC alterado de %d para %d", pc_anterior, uut.PC);
          $display("Instrução IF %b", uut.IF_instr);
          $display("Instrução ID %b", uut.ID_instr);
          $display("Instrução EX %b", uut.EX_instr);
          pc_anterior = uut.PC;

          if (uut.ID_instr[6:0] == 7'b1100011) begin
            if(uut.ID_funct3[3:0] == 3'b101)
              $display("BRANCH BGE detectado. Instrucao: %b", uut.ID_instr);
            else
              $display("BRANCH BLT detectado. Instrucao: %b", uut.ID_instr);

            $display("Comparando rs1: %d e rs2: %d", uut.alu_in1, uut.alu_in2);
            $display("Resultado da comparação: %s \n", uut.branch_taken ? "TOMADO" : "NAO TOMADO");
//$display("Valor de EX_salto_cond <= branch_taken: %d", uut.EX_salto_cond);
            //$display("Valor de branch_valor  <= branch_target: %d", uut.branch_valor);
            $display("PC alvo: %d", uut.branch_target);
          end
      end
  end

  // Bloco de controle da simulação
  initial begin
      $display("Iniciando simulação...");
      clock = 0;
      reset = 1;

      #10 reset = 0;

      #400;

      $display("\n=== Registradores ===");
      $display("x1 = %0d", uut.banco_regs[1]);
      $display("x2 = %0d", uut.banco_regs[2]);
      $display("x3 = %0d", uut.banco_regs[3]);
      $display("x4 = %0d", uut.banco_regs[4]);
      $display("x5 = %0d", uut.banco_regs[5]);
      $display("x6 = %0d", uut.banco_regs[6]);
      $display("x7 = %0d", uut.banco_regs[7]);
      $display("x8 = %0d", uut.banco_regs[8]);

      $display("\n=== Fim da simulação ===");
      $finish;
  end


endmodule
